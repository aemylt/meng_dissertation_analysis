#!/usr/bin/python

import sys

from itertools import izip_longest
import matplotlib.pyplot as plt
import numpy

min_num = int(sys.argv[1])
max_num = int(sys.argv[2])
step_num = int(sys.argv[3])
min_len = int(sys.argv[4])
max_len = int(sys.argv[5])
step_len = int(sys.argv[6])

lengths = []
ac_build = []
dm_build = []
ac_size = []
dm_size = []
short_size = []
periodic_size = []
ac_stream = []
dm_stream = []
diff = []
num = []
for i in range(min_num, max_num + step_num, step_num):
    num += [i] * ((max_len - min_len)/step_len + 1)
    lengths.append([])
    ac_build.append([])
    dm_build.append([])
    ac_size.append([])
    dm_size.append([])
    short_size.append([])
    periodic_size.append([])
    ac_stream.append([])
    dm_stream.append([])
    diff.append([])
    for j in range(min_len, max_len + step_len, step_len):
        lengths[-1].append([])
        ac_build[-1].append([])
        dm_build[-1].append([])
        ac_size[-1].append([])
        dm_size[-1].append([])
        short_size[-1].append([])
        periodic_size[-1].append([])
        ac_stream[-1].append([])
        dm_stream[-1].append([])
        diff[-1].append([])
        with open('results/aho_corasick/dna/dna_%d_%d' % (i, j)) as ac_results:
            with open('results/dict_matching/dna/dna_%d_%d' % (i, j)) as dm_results:
                for k in range(5):
                    lengths[-1][-1].append([])
                    diff[-1][-1].append(int(ac_results.readline()) - int(dm_results.readline()))
                    ac_size[-1][-1].append(int(ac_results.readline()))
                    ac_build[-1][-1].append(float(ac_results.readline()))
                    ac_stream[-1][-1].append(float(ac_results.readline()))
                    ac_results.readline()
                    sizes = dm_results.readline().split(',')
                    dm_size[-1][-1].append(int(sizes[0]))
                    short_size[-1][-1].append(int(sizes[1]))
                    periodic_size[-1][-1].append(int(sizes[2]))
                    dm_build[-1][-1].append(float(dm_results.readline()))
                    dm_stream[-1][-1].append(float(dm_results.readline()))
                    dm_results.readline()
                    with open('patterns/dna/dna_%d_%d_%d' % (i, j, k)) as patterns:
                        patterns.readline()
                        while True:
                            length = patterns.readline()
                            if not length:
                                break
                            lengths[-1][-1][-1].append(int(length))
                            patterns.read(lengths[-1][-1][-1][-1] + 1)
                    lengths[-1][-1][-1] = numpy.mean(lengths[-1][-1][-1])

def flatten(items):
    flattened = []
    try:
        for item in items:
            flattened += flatten(item)
        return flattened
    except:
        return [items]

lengths = flatten(lengths)
ac_build = flatten(ac_build)
dm_build = flatten(dm_build)
ac_size = flatten(ac_size)
dm_size = flatten(dm_size)
short_size = flatten(short_size)
periodic_size = flatten(periodic_size)
ac_stream = flatten(ac_stream)
dm_stream = flatten(dm_stream)
diff = flatten(diff)

def grouper(n, iterable, fillvalue=None):
    "grouper(3, 'ABCDEFG', 'x') --> ABC DEF Gxx"
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)

def get_means(items):
    return [numpy.mean(item) for item in grouper(5, items)]

if max_num == min_num:
    zipped = zip(lengths, ac_build, dm_build, ac_size, dm_size, short_size, periodic_size, ac_stream, dm_stream, diff)
    zipped.sort()
    lengths, ac_build, dm_build, ac_size, dm_size, short_size, periodic_size, ac_stream, dm_stream, diff = zip(*zipped)
    plt.figure()
    plt.plot(lengths, ac_build, label='Aho-Corasick')
    plt.plot(lengths, dm_build, label='Clifford et al.')
    plt.legend()
    plt.title('Build time for dictionary matching')
    plt.xlabel('Average length of patterns (B)')
    plt.ylabel('Build time ($\mu$ s)')
    plt.savefig('build_length_%d_%d.pdf' % (min_len, max_len), bbox_inches='tight')
    plt.figure()
    plt.plot(lengths, ac_size, label='Aho-Corasick')
    plt.plot(lengths, dm_size, label='Clifford et al.')
    plt.legend()
    plt.title('Space usage for dictionary matching')
    plt.xlabel('Average length of patterns (B)')
    plt.ylabel('Space consumption (B)')
    plt.savefig('size_length_%d_%d.pdf' % (min_len, max_len), bbox_inches='tight')
    plt.figure()
    plt.plot(lengths, ac_stream, label='Aho-Corasick')
    plt.plot(lengths, dm_stream, label='Clifford et al.')
    plt.legend()
    plt.title('Average time per character for dictionary matching')
    plt.xlabel('Average length of patterns (B)')
    plt.ylabel('Average time per character ($\mu$ s)')
    plt.savefig('time_length_%d_%d.pdf' % (min_len, max_len), bbox_inches='tight')
    plt.figure()
    plt.plot(lengths, diff)
    plt.title('Difference in number of matches')
    plt.xlabel('Average length of patterns (B)')
    plt.ylabel('Average difference in number of matches')
    plt.savefig('diff_length_%d_%d.pdf' % (min_len, max_len), bbox_inches='tight')
else:
    ac_build = get_means(ac_build)
    dm_build = get_means(dm_build)
    ac_size = get_means(ac_size)
    dm_size = get_means(dm_size)
    short_size = get_means(short_size)
    periodic_size = get_means(periodic_size)
    ac_stream = get_means(ac_stream)
    dm_stream = get_means(dm_stream)
    diff = get_means(diff)
    plt.figure()
    plt.plot(num, ac_build, label='Aho-Corasick')
    plt.plot(num, dm_build, label='Clifford et al.')
    plt.legend()
    plt.title('Build time for dictionary matching')
    plt.xlabel('Number of patterns')
    plt.ylabel('Build time ($\mu$ s)')
    plt.savefig('build_num_%d_%d.pdf' % (min_num, max_num), bbox_inches='tight')
    plt.figure()
    plt.plot(num, ac_size, label='Aho-Corasick')
    plt.plot(num, dm_size, label='Clifford et al.')
    plt.legend()
    plt.title('Space usage for dictionary matching')
    plt.xlabel('Number of patterns')
    plt.ylabel('Space consumption (B)')
    plt.savefig('size_num_%d_%d.pdf' % (min_num, max_num), bbox_inches='tight')
    plt.figure()
    plt.plot(num, ac_stream, label='Aho-Corasick')
    plt.plot(num, dm_stream, label='Clifford et al.')
    plt.legend()
    plt.title('Average time per character for dictionary matching')
    plt.xlabel('Number of patterns')
    plt.ylabel('Average time per character ($\mu$ s)')
    plt.savefig('time_num_%d_%d.pdf' % (min_num, max_num), bbox_inches='tight')
    plt.figure()
    plt.plot(num, diff)
    plt.title('Average difference in number of matches')
    plt.xlabel('Number of patterns')
    plt.ylabel('Average difference in number of matches')
    plt.savefig('diff_num_%d_%d.pdf' % (min_num, max_num), bbox_inches='tight')
